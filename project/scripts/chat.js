const params = new URLSearchParams(window.location.search);
const chatId = params.get('id');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ id: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
if (!chatId || !/^\d+$/.test(chatId) || Number(chatId) < 1) {
    window.location.href = './home.html';
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id —á–∞—Ç–∞');
}

const chatTitleElem = document.getElementById('chat-title');
const messagesContainer = document.getElementById('messages');
const form = document.getElementById('users-actions');
const input = document.getElementById('message-input');
const errorDiv = document.getElementById('error-msg');

let currentUser = null;

const socket = new SockJS(`${API_BASE_URL}/ws`);
const stompClient = Stomp.over(socket);

function addMessage(msg, currentUser) {
    const msgDiv = document.createElement('div');
    const isSelf = msg.sender.id === currentUser.id;

    msgDiv.classList.add('message', isSelf ? 'self' : 'other');

    const createdAt = new Date(msg.createdAt).toLocaleString();

    msgDiv.innerHTML = `
        ${msg.content}
        <small>${createdAt}</small>
    `;

    messagesContainer.appendChild(msgDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function renderChat(chat, currentUser) {
    const otherUser = currentUser.id === chat.user1.id ? chat.user2 : chat.user1;

    //document.getElementById('left-user').textContent = "ü°Ü " + currentUser.username;
    //document.getElementById('right-user').textContent = otherUser.username + " ü°Ñ";

    document.getElementById('left-user').innerHTML = `
        <span class="arrow">ü°Ü</span><span class="username">${currentUser.username}</span>
    `;
    document.getElementById('right-user').innerHTML = `
        <span class="username">${otherUser.username}</span> <span class="arrow">ü°Ñ</span>
    `;


    messagesContainer.innerHTML = '';

    chat.messages.forEach(msg => {
        addMessage(msg, currentUser);
    });

    errorDiv.textContent = '';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
Promise.all([
    fetch(`${API_BASE_URL}/people/me`, { credentials: 'include' }).then(res => {
        if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return res.json();
    }),
        fetch(`${API_BASE_URL}/chats/${chatId}`, { credentials: 'include' }).then(res => {
        if (!res.ok) throw new Error('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return res.json();
    })
])
    .then(([user, chat]) => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —á–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (user.id !== chat.user1.id && user.id !== chat.user2.id) {
            window.location.href = './home.html';
            throw new Error('–î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É —á–∞—Ç—É –∑–∞–ø—Ä–µ—â—ë–Ω');
        }

        currentUser = user;
        renderChat(chat, currentUser);

        stompClient.connect({}, frame => {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            stompClient.subscribe(`/chat/newMessage/${chatId}`, message => {
                const msgObj = JSON.parse(message.body);
                if (msgObj.success) {
                    addMessage(msgObj.messageDto, currentUser);
                    if (msgObj.messageDto.sender.id === currentUser.id) {
                        input.value = '';
                    }
                }
            });

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
            stompClient.subscribe('/user/queue/errors', message => {
                const errorObj = JSON.parse(message.body);
                if (!errorObj.success) {
                    errorDiv.textContent = errorObj.message;
                }
            });
        });
    })
    .catch(err => {
        console.error(err);
        window.location.href = './home.html';
    });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
form.addEventListener('submit', e => {
    e.preventDefault();

    errorDiv.textContent = '';

    const content = input.value.trim();

    if (!content) {
        errorDiv.textContent = '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
        return;
    }

    if (content.length > 200) {
        errorDiv.textContent = '–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤';
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WS
    const messageToSend = {
        chatId: Number(chatId),
        senderId: currentUser.id,
        content
    };

    stompClient.send('/app/sendMessage', {}, JSON.stringify(messageToSend));
});
